apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

//temporary solution for android processor bug:
//https://issuetracker.google.com/issues/37121918
android.libraryVariants.all {
    def aptOutputDir = new File(buildDir, "generated/source/apt/${it.unitTestVariant.dirName}")
    it.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
}

dependencies {
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.annimon:stream:1.1.7'
    compile "com.google.dagger:dagger:2.10"
    compile project(':mvp-api')

    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.7.0'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile project(':mvp-compiler')
    testCompile 'com.google.testing.compile:compile-testing:0.9'
    testCompile 'com.google.truth:truth:0.28'

    testCompile files(getRuntimeJar())
    testCompile files(org.gradle.internal.jvm.Jvm.current().getToolsJar())

    annotationProcessor "com.google.dagger:dagger-compiler:2.10"
    annotationProcessor project(':mvp-compiler')
    provided 'javax.annotation:jsr250-api:1.0'
}

def getRuntimeJar() {
    try {
        final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile();
        File runtimeJar = new File(javaBase, "lib/rt.jar");
        if (runtimeJar.exists()) {
            return runtimeJar;
        }
        runtimeJar = new File(javaBase, "jre/lib/rt.jar");
        return runtimeJar.exists() ? runtimeJar : null;
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}