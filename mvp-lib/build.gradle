apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'

ext {
    artifact = 'mvp-lib'
}

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

android.libraryVariants.all {
    def aptOutputDir = new File(buildDir, "generated/source/apt/${it.unitTestVariant.dirName}")
    it.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
}

dependencies {
    compile project(':mvp-api')
    compile deps.support.appcompat
    compile deps.stream
    compile deps.dagger.library

    testCompile project(':mvp-compiler')
    testCompile deps.junit
    testCompile deps.assertj
    testCompile deps.mockito
    testCompile deps.compiletesting
    testCompile deps.truth

    testCompile files(getRuntimeJar())
    testCompile files(org.gradle.internal.jvm.Jvm.current().getToolsJar())

    annotationProcessor project(':mvp-compiler')
    annotationProcessor deps.dagger.compiler

    provided deps.javaxAnnotation
}

def getRuntimeJar() {
    try {
        final File javaBase = new File(System.getProperty("java.home")).getCanonicalFile()
        File runtimeJar = new File(javaBase, "lib/rt.jar")
        if (runtimeJar.exists()) {
            return runtimeJar
        }
        runtimeJar = new File(javaBase, "jre/lib/rt.jar")
        return runtimeJar.exists() ? runtimeJar : null
    } catch (IOException e) {
        throw new RuntimeException(e)
    }
}

apply from: '../install.gradle'
